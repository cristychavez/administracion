@page "/reserva/eliminar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Eliminar Reserva</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="reserva" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Cliente" @bind-Value="reserva.Cliente" For="@(() => reserva.Cliente)" />
                        <MudTextField Label="Telefono" @bind-Value="reserva.Telefono" For="@(() => reserva.Telefono)" />
                        <MudTextField Label="Fecha" @bind-Value="reserva.Fecha" For="@(() => reserva.Fecha)" />
                        <MudTextField Label="Persona" @bind-Value="reserva.Persona" For="@(() => reserva.Persona)" />
                        <MudTextField Label="HorarioEntrada" @bind-Value="reserva.HorarioEntrada" For="@(() => reserva.HorarioEntrada)" />
                        <MudTextField Label="HorarioSalida" @bind-Value="reserva.HorarioSalida" For="@(() => reserva.HorarioSalida)" />
                        <MudSelect Variant="Variant.Outlined" Label="Servicio" AnchorOrigin="Origin.BottomCenter"
                        @bind-Value="reserva.IdServicio" For="@(() => reserva.IdServicio)">
                            @foreach (var item in servicios)
                            {
                                <MudSelectItem Value="@item.Id">@item.Tipo</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="ml-auto">Eliminar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }

    private IEnumerable<Servicio> servicios = new List<Servicio>();
    private bool showLeaveAlert = false;
    Reserva reserva = new Reserva();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getServicios();

        var resp = await Http.GetStringAsync("reserva/" + id);
        reserva = JsonSerializer.Deserialize<Reserva>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await eliminar();
    }

    private async Task eliminar()
    {
        var httpResponse = await Http.DeleteAsync("reserva/" + reserva.Id);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("reserva/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getServicios()
    {
        var httpResponse = await Http.GetStringAsync("servicio");
        servicios = JsonSerializer.Deserialize<IEnumerable<Servicio>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
